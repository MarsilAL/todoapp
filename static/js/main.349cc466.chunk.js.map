{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","items","console","log","ListItems","map","item","className","key","text","onClick","deletItem","App","state","currenItem","handelInput","bind","addItem","e","this","setState","target","value","Date","now","preventDefault","newItem","newItems","filteredItems","filter","id","onSubmit","type","placeholder","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6SAqBeA,MAjBf,SAAkBC,GACd,IAAMC,EAAQD,EAAMC,MACpBC,QAAQC,IAAIH,GACZ,IAAMI,EAAYH,EAAMI,KAAI,SAAAC,GACxB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACpC,+BAAKF,EAAKG,KACL,8BACI,4BAAQF,UAAU,UAAUG,QAAU,kBAAMV,EAAMW,UAAUL,EAAKE,OAAjE,WAKhB,OACI,6BAAMJ,ICqDCQ,E,kDA9Db,WAAYZ,GAAO,IAAD,8BAEhB,cAAMA,IACDa,MAAM,CACTZ,MAAM,GACNa,WAAW,CACTL,KAAK,GACLD,IAAI,KAGR,EAAKO,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKL,UAAY,EAAKA,UAAUK,KAAf,gBAZD,E,wDAcNE,GACVC,KAAKC,SAAS,CACZN,WAAW,CACTL,KAAMS,EAAEG,OAAOC,MACfd,IAAIe,KAAKC,W,8BAIPN,GACNA,EAAEO,iBACF,IAAMC,EAAUP,KAAKN,MAAMC,WAE3B,GADAZ,QAAQC,IAAIuB,GACM,KAAfA,EAAQjB,KAAU,CACnB,IAAMkB,EAAS,GAAD,mBAAKR,KAAKN,MAAMZ,OAAhB,CAAuByB,IACrCP,KAAKC,SAAS,CACZnB,MAAM0B,EACNb,WAAW,CACTL,KAAK,GACLD,IAAI,S,gCAKFA,GACR,IAAMoB,EAAgBT,KAAKN,MAAMZ,MAAM4B,QAAO,SAAAvB,GAAI,OAAIA,EAAKE,MAAMA,KACjEW,KAAKC,SAAS,CACZnB,MAAM2B,M,+BAKR,OACE,yBAAKrB,UAAU,OACb,gCACA,0BAAMuB,GAAG,aAAaC,SAAUZ,KAAKF,SACrC,2BAAOe,KAAK,OAAOC,YAAY,wBAC/BX,MAAOH,KAAKN,MAAMC,WAAWL,KAC7ByB,SAAUf,KAAKJ,cAEf,4BAAQiB,KAAK,UAAb,SAGF,kBAAC,EAAD,CAAW/B,MAAOkB,KAAKN,MAAMZ,MAAOU,UAAWQ,KAAKR,iB,GAzDxCwB,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.349cc466.chunk.js","sourcesContent":["import React from 'react'\nimport './ListItem.css'\n// import {FontAwsomeIcon} from '@fortawesome/react-fontawesome';\n\nfunction ListItem(props){\n    const items = props.items;\n    console.log(props);\n    const ListItems = items.map(item => {\n        return <div className=\"list\" key={item.key}>\n           <p> {item.text}\n                <span>\n                    <button className=\"faicons\" onClick={ () => props.deletItem(item.key)}>X</button>\n                </span>\n            </p>\n        </div>\n    })\n    return(\n        <div>{ListItems}</div>\n    )\n}\n\nexport default ListItem;","import React from 'react';\nimport './App.css';\nimport ListItems from './ListItems'\n// import { library } from '@fortawesome/fontawesome-svg-core';\n// import { faTrash } from '@fortawesome/free-solid-svg-core';\n// library.add(faTrash);\n\nclass App extends React.Component{\n  constructor(props){\n    // eslint-disable-next-line no-unused-expressions\n    super(props),\n    this.state={\n      items:[],\n      currenItem:{\n        text:'',\n        key:''\n      }\n    }\n    this.handelInput = this.handelInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deletItem = this.deletItem.bind(this);\n  }\n  handelInput(e){\n    this.setState({\n      currenItem:{\n        text: e.target.value,\n        key:Date.now()\n      }\n    })\n  }\n  addItem(e){\n    e.preventDefault();\n    const newItem = this.state.currenItem;\n    console.log(newItem);\n    if(newItem.text!==\"\"){\n      const newItems=[...this.state.items, newItem];\n      this.setState({\n        items:newItems,\n        currenItem:{\n          text:'',\n          key:''\n        }\n      })\n    }\n  }\n  deletItem(key){\n    const filteredItems = this.state.items.filter(item => item.key!==key);\n    this.setState({\n      items:filteredItems\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header>\n        <form id=\"to-do-form\" onSubmit={this.addItem}>\n        <input type=\"text\" placeholder=\" Enter the Text here \" \n        value={this.state.currenItem.text}\n        onChange={this.handelInput}></input>\n\n        <button type=\"submit\">Add</button>\n        </form>\n      </header>\n      <ListItems items={this.state.items} deletItem={this.deletItem} ></ListItems>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}